{"ast":null,"code":"import { warning } from 'hey-listen';\nimport { clamp } from '../../utils/clamp.mjs';\nvar safeMin = 0.001;\nvar minDuration = 0.01;\nvar maxDuration = 10.0;\nvar minDamping = 0.05;\nvar maxDamping = 1;\n\nfunction findSpring(_ref) {\n  var _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 800 : _ref$duration,\n      _ref$bounce = _ref.bounce,\n      bounce = _ref$bounce === void 0 ? 0.25 : _ref$bounce,\n      _ref$velocity = _ref.velocity,\n      velocity = _ref$velocity === void 0 ? 0 : _ref$velocity,\n      _ref$mass = _ref.mass,\n      mass = _ref$mass === void 0 ? 1 : _ref$mass;\n  var envelope;\n  var derivative;\n  warning(duration <= maxDuration * 1000, \"Spring duration must be 10 seconds or less\");\n  var dampingRatio = 1 - bounce;\n  dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n  duration = clamp(minDuration, maxDuration, duration / 1000);\n\n  if (dampingRatio < 1) {\n    envelope = function envelope(undampedFreq) {\n      var exponentialDecay = undampedFreq * dampingRatio;\n      var delta = exponentialDecay * duration;\n      var a = exponentialDecay - velocity;\n      var b = calcAngularFreq(undampedFreq, dampingRatio);\n      var c = Math.exp(-delta);\n      return safeMin - a / b * c;\n    };\n\n    derivative = function derivative(undampedFreq) {\n      var exponentialDecay = undampedFreq * dampingRatio;\n      var delta = exponentialDecay * duration;\n      var d = delta * velocity + velocity;\n      var e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n      var f = Math.exp(-delta);\n      var g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n      var factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n      return factor * ((d - e) * f) / g;\n    };\n  } else {\n    envelope = function envelope(undampedFreq) {\n      var a = Math.exp(-undampedFreq * duration);\n      var b = (undampedFreq - velocity) * duration + 1;\n      return -safeMin + a * b;\n    };\n\n    derivative = function derivative(undampedFreq) {\n      var a = Math.exp(-undampedFreq * duration);\n      var b = (velocity - undampedFreq) * (duration * duration);\n      return a * b;\n    };\n  }\n\n  var initialGuess = 5 / duration;\n  var undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n  duration = duration * 1000;\n\n  if (isNaN(undampedFreq)) {\n    return {\n      stiffness: 100,\n      damping: 10,\n      duration: duration\n    };\n  } else {\n    var stiffness = Math.pow(undampedFreq, 2) * mass;\n    return {\n      stiffness: stiffness,\n      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n      duration: duration\n    };\n  }\n}\n\nvar rootIterations = 12;\n\nfunction approximateRoot(envelope, derivative, initialGuess) {\n  var result = initialGuess;\n\n  for (var i = 1; i < rootIterations; i++) {\n    result = result - envelope(result) / derivative(result);\n  }\n\n  return result;\n}\n\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };","map":{"version":3,"names":["warning","clamp","safeMin","minDuration","maxDuration","minDamping","maxDamping","findSpring","duration","bounce","velocity","mass","envelope","derivative","dampingRatio","undampedFreq","exponentialDecay","delta","a","b","calcAngularFreq","c","Math","exp","d","e","pow","f","g","factor","initialGuess","approximateRoot","isNaN","stiffness","damping","sqrt","rootIterations","result","i"],"sources":["C:/Users/Tapasya/Desktop/FitClub-Starter/node_modules/popmotion/dist/es/animations/utils/find-spring.mjs"],"sourcesContent":["import { warning } from 'hey-listen';\nimport { clamp } from '../../utils/clamp.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= maxDuration * 1000, \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, duration / 1000);\n    if (dampingRatio < 1) {\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = duration * 1000;\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AAEA,IAAMC,OAAO,GAAG,KAAhB;AACA,IAAMC,WAAW,GAAG,IAApB;AACA,IAAMC,WAAW,GAAG,IAApB;AACA,IAAMC,UAAU,GAAG,IAAnB;AACA,IAAMC,UAAU,GAAG,CAAnB;;AACA,SAASC,UAAT,OAAgF;EAAA,yBAA1DC,QAA0D;EAAA,IAA1DA,QAA0D,8BAA/C,GAA+C;EAAA,uBAA1CC,MAA0C;EAAA,IAA1CA,MAA0C,4BAAjC,IAAiC;EAAA,yBAA3BC,QAA2B;EAAA,IAA3BA,QAA2B,8BAAhB,CAAgB;EAAA,qBAAbC,IAAa;EAAA,IAAbA,IAAa,0BAAN,CAAM;EAC5E,IAAIC,QAAJ;EACA,IAAIC,UAAJ;EACAb,OAAO,CAACQ,QAAQ,IAAIJ,WAAW,GAAG,IAA3B,EAAiC,4CAAjC,CAAP;EACA,IAAIU,YAAY,GAAG,IAAIL,MAAvB;EACAK,YAAY,GAAGb,KAAK,CAACI,UAAD,EAAaC,UAAb,EAAyBQ,YAAzB,CAApB;EACAN,QAAQ,GAAGP,KAAK,CAACE,WAAD,EAAcC,WAAd,EAA2BI,QAAQ,GAAG,IAAtC,CAAhB;;EACA,IAAIM,YAAY,GAAG,CAAnB,EAAsB;IAClBF,QAAQ,GAAG,kBAACG,YAAD,EAAkB;MACzB,IAAMC,gBAAgB,GAAGD,YAAY,GAAGD,YAAxC;MACA,IAAMG,KAAK,GAAGD,gBAAgB,GAAGR,QAAjC;MACA,IAAMU,CAAC,GAAGF,gBAAgB,GAAGN,QAA7B;MACA,IAAMS,CAAC,GAAGC,eAAe,CAACL,YAAD,EAAeD,YAAf,CAAzB;MACA,IAAMO,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACN,KAAV,CAAV;MACA,OAAOf,OAAO,GAAIgB,CAAC,GAAGC,CAAL,GAAUE,CAA3B;IACH,CAPD;;IAQAR,UAAU,GAAG,oBAACE,YAAD,EAAkB;MAC3B,IAAMC,gBAAgB,GAAGD,YAAY,GAAGD,YAAxC;MACA,IAAMG,KAAK,GAAGD,gBAAgB,GAAGR,QAAjC;MACA,IAAMgB,CAAC,GAAGP,KAAK,GAAGP,QAAR,GAAmBA,QAA7B;MACA,IAAMe,CAAC,GAAGH,IAAI,CAACI,GAAL,CAASZ,YAAT,EAAuB,CAAvB,IAA4BQ,IAAI,CAACI,GAAL,CAASX,YAAT,EAAuB,CAAvB,CAA5B,GAAwDP,QAAlE;MACA,IAAMmB,CAAC,GAAGL,IAAI,CAACC,GAAL,CAAS,CAACN,KAAV,CAAV;MACA,IAAMW,CAAC,GAAGR,eAAe,CAACE,IAAI,CAACI,GAAL,CAASX,YAAT,EAAuB,CAAvB,CAAD,EAA4BD,YAA5B,CAAzB;MACA,IAAMe,MAAM,GAAG,CAACjB,QAAQ,CAACG,YAAD,CAAT,GAA0Bb,OAA1B,GAAoC,CAApC,GAAwC,CAAC,CAAzC,GAA6C,CAA5D;MACA,OAAQ2B,MAAM,IAAI,CAACL,CAAC,GAAGC,CAAL,IAAUE,CAAd,CAAP,GAA2BC,CAAlC;IACH,CATD;EAUH,CAnBD,MAoBK;IACDhB,QAAQ,GAAG,kBAACG,YAAD,EAAkB;MACzB,IAAMG,CAAC,GAAGI,IAAI,CAACC,GAAL,CAAS,CAACR,YAAD,GAAgBP,QAAzB,CAAV;MACA,IAAMW,CAAC,GAAG,CAACJ,YAAY,GAAGL,QAAhB,IAA4BF,QAA5B,GAAuC,CAAjD;MACA,OAAO,CAACN,OAAD,GAAWgB,CAAC,GAAGC,CAAtB;IACH,CAJD;;IAKAN,UAAU,GAAG,oBAACE,YAAD,EAAkB;MAC3B,IAAMG,CAAC,GAAGI,IAAI,CAACC,GAAL,CAAS,CAACR,YAAD,GAAgBP,QAAzB,CAAV;MACA,IAAMW,CAAC,GAAG,CAACT,QAAQ,GAAGK,YAAZ,KAA6BP,QAAQ,GAAGA,QAAxC,CAAV;MACA,OAAOU,CAAC,GAAGC,CAAX;IACH,CAJD;EAKH;;EACD,IAAMW,YAAY,GAAG,IAAItB,QAAzB;EACA,IAAMO,YAAY,GAAGgB,eAAe,CAACnB,QAAD,EAAWC,UAAX,EAAuBiB,YAAvB,CAApC;EACAtB,QAAQ,GAAGA,QAAQ,GAAG,IAAtB;;EACA,IAAIwB,KAAK,CAACjB,YAAD,CAAT,EAAyB;IACrB,OAAO;MACHkB,SAAS,EAAE,GADR;MAEHC,OAAO,EAAE,EAFN;MAGH1B,QAAQ,EAARA;IAHG,CAAP;EAKH,CAND,MAOK;IACD,IAAMyB,SAAS,GAAGX,IAAI,CAACI,GAAL,CAASX,YAAT,EAAuB,CAAvB,IAA4BJ,IAA9C;IACA,OAAO;MACHsB,SAAS,EAATA,SADG;MAEHC,OAAO,EAAEpB,YAAY,GAAG,CAAf,GAAmBQ,IAAI,CAACa,IAAL,CAAUxB,IAAI,GAAGsB,SAAjB,CAFzB;MAGHzB,QAAQ,EAARA;IAHG,CAAP;EAKH;AACJ;;AACD,IAAM4B,cAAc,GAAG,EAAvB;;AACA,SAASL,eAAT,CAAyBnB,QAAzB,EAAmCC,UAAnC,EAA+CiB,YAA/C,EAA6D;EACzD,IAAIO,MAAM,GAAGP,YAAb;;EACA,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,EAArC,EAAyC;IACrCD,MAAM,GAAGA,MAAM,GAAGzB,QAAQ,CAACyB,MAAD,CAAR,GAAmBxB,UAAU,CAACwB,MAAD,CAA/C;EACH;;EACD,OAAOA,MAAP;AACH;;AACD,SAASjB,eAAT,CAAyBL,YAAzB,EAAuCD,YAAvC,EAAqD;EACjD,OAAOC,YAAY,GAAGO,IAAI,CAACa,IAAL,CAAU,IAAIrB,YAAY,GAAGA,YAA7B,CAAtB;AACH;;AAED,SAASM,eAAT,EAA0Bb,UAA1B,EAAsCD,UAAtC,EAAkDF,WAAlD,EAA+DC,UAA/D,EAA2EF,WAA3E"},"metadata":{},"sourceType":"module"}