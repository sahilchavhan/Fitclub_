{"ast":null,"code":"import { useConstant } from '../../utils/use-constant.mjs';\nimport { createScrollUpdater, createScrollMotionValues } from './utils.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { invariant } from 'hey-listen';\n\nvar getElementScrollOffsets = function (element) {\n  return function () {\n    return {\n      xOffset: element.scrollLeft,\n      yOffset: element.scrollTop,\n      xMaxOffset: element.scrollWidth - element.offsetWidth,\n      yMaxOffset: element.scrollHeight - element.offsetHeight\n    };\n  };\n};\n/**\n * Returns MotionValues that update when the provided element scrolls:\n *\n * - `scrollX` — Horizontal scroll distance in pixels.\n * - `scrollY` — Vertical scroll distance in pixels.\n * - `scrollXProgress` — Horizontal scroll progress between `0` and `1`.\n * - `scrollYProgress` — Vertical scroll progress between `0` and `1`.\n *\n * This element must be set to `overflow: scroll` on either or both axes to report scroll offset.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const ref = useRef()\n *   const { scrollYProgress } = useElementScroll(ref)\n *\n *   return (\n *     <div ref={ref}>\n *       <motion.div style={{ scaleX: scrollYProgress }} />\n *     </div>\n *   )\n * }\n * ```\n *\n * @public\n */\n\n\nfunction useElementScroll(ref) {\n  var values = useConstant(createScrollMotionValues);\n  useIsomorphicLayoutEffect(function () {\n    var element = ref.current;\n    invariant(!!element, \"ref provided to useScroll must be passed into a HTML element.\");\n    if (!element) return;\n    var updateScrollValues = createScrollUpdater(values, getElementScrollOffsets(element));\n    var scrollListener = addDomEvent(element, \"scroll\", updateScrollValues);\n    var resizeListener = addDomEvent(element, \"resize\", updateScrollValues);\n    return function () {\n      scrollListener && scrollListener();\n      resizeListener && resizeListener();\n    };\n  }, []);\n  return values;\n}\n\nexport { useElementScroll };","map":{"version":3,"names":["useConstant","createScrollUpdater","createScrollMotionValues","addDomEvent","useIsomorphicLayoutEffect","invariant","getElementScrollOffsets","element","xOffset","scrollLeft","yOffset","scrollTop","xMaxOffset","scrollWidth","offsetWidth","yMaxOffset","scrollHeight","offsetHeight","useElementScroll","ref","values","current","updateScrollValues","scrollListener","resizeListener"],"sources":["/Users/mac/Desktop/projects/FitClub-Starter/node_modules/framer-motion/dist/es/value/scroll/use-element-scroll.mjs"],"sourcesContent":["import { useConstant } from '../../utils/use-constant.mjs';\nimport { createScrollUpdater, createScrollMotionValues } from './utils.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { invariant } from 'hey-listen';\n\nvar getElementScrollOffsets = function (element) { return function () {\n    return {\n        xOffset: element.scrollLeft,\n        yOffset: element.scrollTop,\n        xMaxOffset: element.scrollWidth - element.offsetWidth,\n        yMaxOffset: element.scrollHeight - element.offsetHeight,\n    };\n}; };\n/**\n * Returns MotionValues that update when the provided element scrolls:\n *\n * - `scrollX` — Horizontal scroll distance in pixels.\n * - `scrollY` — Vertical scroll distance in pixels.\n * - `scrollXProgress` — Horizontal scroll progress between `0` and `1`.\n * - `scrollYProgress` — Vertical scroll progress between `0` and `1`.\n *\n * This element must be set to `overflow: scroll` on either or both axes to report scroll offset.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const ref = useRef()\n *   const { scrollYProgress } = useElementScroll(ref)\n *\n *   return (\n *     <div ref={ref}>\n *       <motion.div style={{ scaleX: scrollYProgress }} />\n *     </div>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction useElementScroll(ref) {\n    var values = useConstant(createScrollMotionValues);\n    useIsomorphicLayoutEffect(function () {\n        var element = ref.current;\n        invariant(!!element, \"ref provided to useScroll must be passed into a HTML element.\");\n        if (!element)\n            return;\n        var updateScrollValues = createScrollUpdater(values, getElementScrollOffsets(element));\n        var scrollListener = addDomEvent(element, \"scroll\", updateScrollValues);\n        var resizeListener = addDomEvent(element, \"resize\", updateScrollValues);\n        return function () {\n            scrollListener && scrollListener();\n            resizeListener && resizeListener();\n        };\n    }, []);\n    return values;\n}\n\nexport { useElementScroll };\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,8BAA5B;AACA,SAASC,mBAAT,EAA8BC,wBAA9B,QAA8D,aAA9D;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,yBAAT,QAA0C,uCAA1C;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAEA,IAAIC,uBAAuB,GAAG,UAAUC,OAAV,EAAmB;EAAE,OAAO,YAAY;IAClE,OAAO;MACHC,OAAO,EAAED,OAAO,CAACE,UADd;MAEHC,OAAO,EAAEH,OAAO,CAACI,SAFd;MAGHC,UAAU,EAAEL,OAAO,CAACM,WAAR,GAAsBN,OAAO,CAACO,WAHvC;MAIHC,UAAU,EAAER,OAAO,CAACS,YAAR,GAAuBT,OAAO,CAACU;IAJxC,CAAP;EAMH,CAPkD;AAO/C,CAPJ;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;EAC3B,IAAIC,MAAM,GAAGpB,WAAW,CAACE,wBAAD,CAAxB;EACAE,yBAAyB,CAAC,YAAY;IAClC,IAAIG,OAAO,GAAGY,GAAG,CAACE,OAAlB;IACAhB,SAAS,CAAC,CAAC,CAACE,OAAH,EAAY,+DAAZ,CAAT;IACA,IAAI,CAACA,OAAL,EACI;IACJ,IAAIe,kBAAkB,GAAGrB,mBAAmB,CAACmB,MAAD,EAASd,uBAAuB,CAACC,OAAD,CAAhC,CAA5C;IACA,IAAIgB,cAAc,GAAGpB,WAAW,CAACI,OAAD,EAAU,QAAV,EAAoBe,kBAApB,CAAhC;IACA,IAAIE,cAAc,GAAGrB,WAAW,CAACI,OAAD,EAAU,QAAV,EAAoBe,kBAApB,CAAhC;IACA,OAAO,YAAY;MACfC,cAAc,IAAIA,cAAc,EAAhC;MACAC,cAAc,IAAIA,cAAc,EAAhC;IACH,CAHD;EAIH,CAZwB,EAYtB,EAZsB,CAAzB;EAaA,OAAOJ,MAAP;AACH;;AAED,SAASF,gBAAT"},"metadata":{},"sourceType":"module"}